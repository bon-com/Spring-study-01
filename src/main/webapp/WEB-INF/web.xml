<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
      http://java.sun.com/xml/ns/javaee
      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd
    "
	version="3.0">
	<!-- 
		Webアプリケーションのリスナーとして登録。
		Webアプリケーションが起動するとき、SpringのApplicationContextを初期化する。
		これによりDIコンテナがBeanの準備を完了させるというイメージ。
	 -->
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>
	<!-- 
		ApplicationContextのタイプを設定。
		AnnotationConfigWebApplicationContextを設定することで、Javaベースの設定（アノテーション）を
		サポートする。
	 -->
	<context-param>
		<param-name>contextClass</param-name>
		<param-value>
			org.springframework.web.context.support.AnnotationConfigWebApplicationContext
		</param-value>
	</context-param>
	<!-- 
		ApplicationContextがロードする設定クラスの場所を指定する。
		以下のクラスで@Configurationを使用してBean管理できる。
		サービス、リポジトリ層などのBeanを管理する。
	 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>com.example.config.AppConfig</param-value>
	</context-param>

	<!-- 
		リクエストとレスポンスの文字エンコーディングを設定する。
		CharacterEncodingFilterはSpringが提供するクラス。
		  ・encodingパラメータ：フィルタが使用するエンコーディング
		  ・forceEncodingパラメータ：trueの場合、リクエストとレスポンスでエンコーディングを行う
	 -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>
			org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<!-- 
		CharacterEncodingFilterがどのURLパターンに適用されるかを設定する。
		「/*」とすることで、すべてのリクエストにフィルターを適用する。
	 -->
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 
		DispatcherServletはSpring MVCのフロントコントローラとして機能する。
		クライアントからのリクエストをコントローラにルーティングする。
		DispatcherServletをappという名前で定義している。
		init-paramという初期化パラメータはDispatcherServletの動作を設定している。
		  ・contextClass：DispatcherServletが使用するApplicationContextのタイプ
		  ・contextConfigLocation：DispatcherServletがロードする設定クラスの場所。
		    WebMvcConfigクラスをSpringの設定クラスにしている。
		load-on-startupはサーブレットのロード順を示しており、最初にロードすることを意味する。
		主にプレゼンテーション層のBeanを管理する。
	 -->
	<servlet>
		<servlet-name>app</servlet-name>
		<servlet-class>
			org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<init-param>
			<param-name>contextClass</param-name>
			<param-value>
				org.springframework.web.context.support.AnnotationConfigWebApplicationContext
			</param-value>
		</init-param>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>com.example.config.WebMvcConfig</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- 
		DispatcherServletのURLマッピングを定義している。
		「/」は「http://example.com/」などのアプリケーションルートURLとそのサブパスにアクセスされたとき
		要するに全てのURLパターンでDispatcherServletにルーティングされる。
	 -->
	<servlet-mapping>
		<servlet-name>app</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- 
		拡張子「.jsp」ファイルはすべてUTF-8でエンコーディングされて、
		各JSPの先頭にinclude.jspを含むようにする設定。
	 -->
	<jsp-config>
		<jsp-property-group>
			<url-pattern>*.jsp</url-pattern>
			<page-encoding>UTF-8</page-encoding>
			<include-prelude>/WEB-INF/include.jsp</include-prelude>
		</jsp-property-group>
	</jsp-config>

</web-app>